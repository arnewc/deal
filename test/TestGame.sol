pragma solidity >= 0.7.0;

import "truffle/Assert.sol";
import "truffle/DeployedAddresses.sol";
import "../contracts/Game.sol";

contract GameTest
{
	Game game;

	Secret alice_secret;
	Secret bob_secret;
	uint _index = 0;

	uint[52] shuffled_deck;
	uint bob_card;

	constructor()
	{
		game = new Game();

		alice_secret.K = 112566956154863052781070310967253119246216981786741752931875562987035874494017;
		alice_secret.L = 9399444064582850483088446206811650016049595769753119335928445625434656183393;

		bob_secret.L = alice_secret.K;
		bob_secret.K = alice_secret.L;
	}

	function test_initial_index() public
	{
		Assert.equal(game.index(), _index, "Initial index should be 0");
	}

	function test_N() public
	{
		Assert.equal(
			game.N(),
			114229338781499300852999117797613317487529393292838994789209652886651289431457,
			"Mismatched value of N"
		);
	}

	function test_secret_arithmetic() public
	{
		uint prod = mulmod(alice_secret.K, alice_secret.L, game.N() - 1);
		Assert.equal(prod, 1, "Product of secrets should be 1 (mod phi(N))");
	}

	function test_commit_alice() public
	{
		shuffled_deck[0] = 18924620565202891746174703701038939942002644347992208639546158317319462940588;
		shuffled_deck[1] = 59881313364520992581547974303044115508476766895004228283723937705644667913359;
		shuffled_deck[2] = 25630121259337622705223943944745520922265215383464941168527544754671470792477;
		shuffled_deck[3] = 34568975596247206709434048494827453816482997138956338531002330673583074201875;
		shuffled_deck[4] = 7589154629069449178928323063042955822360043575236212399755429243952604690042;
		shuffled_deck[5] = 3953313660405332681682617845004221041058626097456233412805600187395392505345;
		shuffled_deck[6] = 36299423187373788636433660024701617956833810922910385454087741809043616843477;
		shuffled_deck[7] = 43752193177810052487324654467157175466161712958288918249654705316858343445290;
		shuffled_deck[8] = 50398082350089764978944033642437791215240971410737735055406667687459361236115;
		shuffled_deck[9] = 39545027074015585452146237896948046472720370202586105441919187648507421902476;
		shuffled_deck[10] = 14705722886999719646645512541159439035087779602360959036251098674272914185726;
		shuffled_deck[11] = 63855740031223719870220320475169243222259241840542194755875543670339008656574;
		shuffled_deck[12] = 22087255791698582026259806473881127832498884237354061115142830982616752673535;
		shuffled_deck[13] = 22844908972118977027253212612490155990444956010488801855334144887779977107466;
		shuffled_deck[14] = 19206359962575756291548498315396863071744717940713557792665127373006068076523;
		shuffled_deck[15] = 14739261941628173727089227290789861820205332526020452747377662408137293328706;
		shuffled_deck[16] = 55281345388713155313819476314313919897802628042274474523845612239787387203389;
		shuffled_deck[17] = 97493346168126516153153338593425000329948156063131575363920414533291076523817;
		shuffled_deck[18] = 27645219196691696747521796489620029822462562835727532299529903114774545369115;
		shuffled_deck[19] = 12113545318442769570954774742557368815421981266448420914160743148835881338078;
		shuffled_deck[20] = 101035040583606610938720815638120084911088645667542563819610668624636528985854;
		shuffled_deck[21] = 35114208682747246373671865529944953923726609800598969154005547815716545791206;
		shuffled_deck[22] = 100098026345821088505766898835981171715333337010185408874272358296107216266557;
		shuffled_deck[23] = 109500090080324888054473853569291860655560394552769797177495128959160421640743;
		shuffled_deck[24] = 59319243624344054221113858452661881009549964833772317857067947648256681708417;
		shuffled_deck[25] = 72223080081492562719805414717200427180135600543553849971255583340717182131318;
		shuffled_deck[26] = 33706081141647364319973576021236506151418571458665002722907553843750384732479;
		shuffled_deck[27] = 100356355733056093841752331099115723946809219393952904829152705774703689195092;
		shuffled_deck[28] = 92134423510035684022053093896462705762090215003324685872258120977217429307222;
		shuffled_deck[29] = 30436956041323918465079963131314568520608113556542763364770885785833569134323;
		shuffled_deck[30] = 36523235252927603940531321721872675537732088814065979827199122242847434151253;
		shuffled_deck[31] = 104564418932660071475614984587017214798181370690127954677326645415029947359677;
		shuffled_deck[32] = 2500568722362438938306818203156265238639023924775954743936638644303281438106;
		shuffled_deck[33] = 27615917848751555144154461115163633491251881444504757184409001971240172534317;
		shuffled_deck[34] = 61915085685194055796696073118471006859969114558615862925513923086528122171612;
		shuffled_deck[35] = 75699241507293797650271369550970656271897730020193502886133780536876684482455;
		shuffled_deck[36] = 102348282283031272098657388578029416927866738823263077080095198797250517674645;
		shuffled_deck[37] = 110013261432989914455835787761235806509506701806908131426345216891910770066021;
		shuffled_deck[38] = 106718486331259282760674794187311519730228357297897739814313376821452168169111;
		shuffled_deck[39] = 61473910052926117480939356721022691882898246114109182368896464820097228138216;
		shuffled_deck[40] = 74535790376812485194768921954043298717738868812590617260840271290095255424394;
		shuffled_deck[41] = 50690799449379123838437013760545240487831275047501860212085197307530581980517;
		shuffled_deck[42] = 23895783369037446390957720892643500892126861761847918115970910562362061236211;
		shuffled_deck[43] = 13768713757892686244447687148342961517804240957287778011847935122229160711749;
		shuffled_deck[44] = 83375237766380572628244220582154237146582676659878548970589657147482566684996;
		shuffled_deck[45] = 1084571363946267669360676859658946329948678756392766993607695302139841094605;
		shuffled_deck[46] = 50873595814367196751188141750009238065315395108390935139282050935568169382065;
		shuffled_deck[47] = 83185449988118419277487493008194312339837902198698525027115158192534254117248;
		shuffled_deck[48] = 77579130219322850926899447893026581620516543264872802278297434255840559667873;
		shuffled_deck[49] = 72435328612388694178614955713844805893581783160134813305310100592128141912713;
		shuffled_deck[50] = 98300898713043129899764356063081118113799743760731095077798620381520852282903;
		shuffled_deck[51] = 33636443173709452766841940220395881749443525146361181913494670212991770672083;

		_index = game.commit_alice(shuffled_deck);
		Assert.equal(_index, game.index() - 1, "Index does not match!");

		/* The next statement is an ICE! */
		/* Instance memory instance = game.getInstance(_index); */
		/* Assert.equal(State.Commit_Bob == instance.state, true, "Wrong state!"); */

		/* Assert.equal(shuffled_deck[13], instance.cards[13], "Wrong data!"); */
	}

	function test_commit_bob() public
	{
		uint[52] memory cards = game.commit_bob(_index, 42);

		Assert.equal(cards[13], shuffled_deck[13], "Wrong data!");
		bob_card = Math.expmod(cards[13], bob_secret.K, game.N());

		Assert.isTrue(Math.expmod(bob_card, bob_secret.L, game.N()) == cards[13], "Incorrect encryption-decryption.");
	}


	function test_play_bob() public
	{
		game.play_bob(_index, bob_card);
	}

	function test_play_alice() public
	{
		game.play_alice(_index, Math.expmod(bob_card, alice_secret.L, game.N()));
	}

	function test_index_value() public
	{
		Assert.equal(game.index(), 1, "Valid of index was not incremented.");
	}

	function test_reveal_alice() public
	{
		game.reveal_alice(_index, alice_secret.L);
	}

	function test_reveal_bob() public
	{
		game.reveal_bob(_index, bob_secret.L);
	}

	function test_verify() public
	{
		(bool valid, address winner) = game.verify(_index);

		Assert.isTrue(valid, "Test case could not be verified");
	}

}
