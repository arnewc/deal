import * as bigintCryptoUtils from 'bigint-crypto-utils';
/* global BigInt */
export const N = 114229338781499300852999117797613317487529393292838994789209652886651289431457n;
// K is a number such that GCD(K, phi(N)) = 1
// compute K by pick random number r. K = r * phi(N) + 1 mod (2**256)
// compute the secrets
// TODO improve the random number generation
const r = Math.floor(2**32 * Math.random());
export const K = (BigInt(r) * (N - 1n) + 1n) % (2n**256n);
// Find a way to encode this.
export const L = bigintCryptoUtils.modInv(K, N - 1n);

// Now, code to interact with the contract

// An encoding of the deck
export var deck = [161803398874989484820458683436563811772030917980576n, 286213544862270526046281890244970720720418939113748n, 475408807538689175212663386222353693179318006076672n, 635443338908659593958290563832266131992829026788067n, 520876689250171169620703222104321626954862629631361n, 443814975870122034080588795445474924618569536486444n, 924104432077134494704956584678850987433944221254487n, 706647809158846074998871240076521705751797883416625n, 624940758906970400028121042762177111777805315317141n, 11704666599146697987317613560067087480710131795236n, 894275219484353056783002287856997829778347845878228n, 911097625003026961561700250464338243776486102838312n, 683303724292675263116533924731671112115881863851331n, 620384005222165791286675294654906811317159934323597n, 349498509040947621322298101726107059611645629909816n, 290555208524790352406020172799747175342777592778625n, 619432082750513121815628551222480939471234145170223n, 735805772786160086883829523045926478780178899219902n, 707769038953219681986151437803149974110692608867429n, 622675756052317277752035361393621076738937645560606n, 59216589466759551900400555908950229530942312482355n, 212212415444006470340565734797663972394949946584578n, 873039623090375033993856210242369025138680414577995n, 698122445747178034173126453220416397232134044449487n, 302315417676893752103068737880344170093954409627955n, 898678723209512426893557309704509595684401755519881n, 921802064052905518934947592600734852282101088194644n, 544222318891319294689622002301443770269923007803085n, 261180754519288770502109684249362713592518760777884n, 665836150238913493333122310533923213624319263728910n, 670503399282265263556209029798642472759772565508615n, 487543574826471814145127000602389016207773224499435n, 308899909501680328112194320481964387675863314798571n, 911397815397807476150772211750826945863932045652098n, 969855567814106968372884058746103378105444390943683n, 583581381131168993855576975484149144534150912954070n, 50194775486163075422641729394680367319805861833918n, 328599130396072014455950449779212076124785645916160n, 837059498786006970189409886400764436170933417270919n, 143365013715766011480381430626238051432117348151005n, 590134561011800790506381421527093085880928757034505n, 78081454588199063361298279814117453392731208092897n, 279222132980642946878242748740174505540677875708323n, 731097591511776297844328474790817651809778726841611n, 763250386121129143683437670235037111633072586988325n, 871033632223810980901211019899176841491751233134015n, 273384383723450093478604979294599158220125810459823n, 92552872124137043614910205471855496118087642657651n, 106054588147560443178479858453973128630162544876114n, 852021706440411166076695059775783257039511087823082n, 710647893902111569103927683845386333321565829659773n, 103436032322545743637204124406408882673758433953679n];


export function encrypt(_value, _K, _N) {
	  return bigintCryptoUtils.modPow(_value, _K, _N);
}

export function generate_shuffled_deck(_K, _N, _deck) {
    var j, x, i;
    for (i = _deck.length - 1; i > 0; i--) {
        j = Math.floor(Math.random() * (i + 1));
        x = _deck[i];
        _deck[i] = _deck[j];
        _deck[j] = x;
    }

    console.log(_deck);
	  return _deck.map(value => encrypt(value, _K, _N));
}
